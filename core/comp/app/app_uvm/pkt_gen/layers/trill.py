#!/bin/python3

#  SPDX-License-Identifier: BSD-3-Clause
#
#  simple pakcet generator. Packet are generated by random walk.
#  In this file is resolving how prototoclols follows.
#
#  Copyright (C) 2022 CESNET
#  Author(s):
#    Radek IÅ¡a <isa@cesnet.cz>

import scapy.all
import scapy.packet
import scapy.fields
import scapy.utils
import scapy.volatile


class MyStrLenField(scapy.fields.StrLenField):

    __slots__ = ["rand_item"]

    def __init__(
            self,
            name,  # type: str
            default,  # type: bytes
            length_from=None,  # type: Optional[Callable[[Packet], int]]
            max_length=None,  # type: Optional[Any]
    ):
        super(MyStrLenField, self).__init__(name, default, length_from=length_from, max_length=max_length)

    def randval(self):
        # Randomization is move to Trill protocol.
        return b""


class Trill(scapy.packet.Packet):
    name = "Trill"
    fields_desc = [
            #16bits
            scapy.fields.BitField("version", 0, 2),
            scapy.fields.BitField("res",     0, 2),
            scapy.fields.BitField("m",   0,  1),
            scapy.fields.BitField("opt_length", 0,  5),
            scapy.fields.BitField("hop_count",  0,  6),
            #16bits
            scapy.fields.ShortField("src_trill_id", 0),
            #16bits
            scapy.fields.ShortField("dst_trill_id", 0),
            #Variable lengtih
            MyStrLenField("data", None, length_from=lambda pkt: pkt.opt_length)
    ]

    def do_build(self):
        field_opt_length = self.opt_length
        field_data       = self.data

        if (isinstance(field_opt_length, scapy.volatile.RandNum)):
            if field_data is None: # randomize opt_length and data
                field_opt_length = field_opt_length._fix()
                field_data       = scapy.volatile.RandBin(field_opt_length*4)
            else: # get length from data
                field_data += b"\0" * ((-len(field_data)) % 4)
                field_opt_length = len(field_data)/4
        else: # randomize data depends on length
            if field_data is None:
                field_data = scapy.volatile.RandBin(field_opt_length*4)
            else:  # Cannot randomize because all is set
                pass

        if not self.explicit:
            self = next(iter(self))

        self.opt_length = field_opt_length
        self.data       = field_data

        pkt = self.self_build()
        for t in self.post_transforms:
            pkt = t(pkt)
        pay = self.do_build_payload()
        if self.raw_packet_cache is None:
            return self.post_build(pkt, pay)
        else:
            return pkt + pay


scapy.packet.bind_layers(scapy.all.Ether, Trill, type=0x22f3)
scapy.packet.bind_layers(scapy.all.Dot1Q, Trill, type=0x22f3)
scapy.packet.bind_layers(Trill, scapy.all.Ether)
